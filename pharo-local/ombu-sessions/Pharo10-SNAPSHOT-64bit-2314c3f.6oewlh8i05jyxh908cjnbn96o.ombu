OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:57:25.513-05:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.4t3kg4teawebg1xv32kkdcbda', '8370' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #WAR,		#affectedPackageName : #WAR	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T17:57:25.514-05:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#definitionSource : 'Object subclass: #War\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'WAR\'',				#traitCompositionSource : '{}',				#superclassName : 'Object'			},			#name : #War,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#definitionSource : 'War class\r\tinstanceVariableNames: \'\'',					#traitCompositionSource : '{}'				},				#name : #'War class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #War,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #WAR,			#package : #WAR,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:00:34.007-05:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 winner |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            winner pile2 asArray.].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            winner pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [\r        winner pile2 asArray].\r    (pile2 size = 0) ifTrue: [\r        winner pile1 asArray]\r].',			#stamp : 'Anonymous 2/24/2023 18:00',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:13:31.51-05:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r    ^ winner asArray',			#stamp : 'Anonymous 2/24/2023 18:13',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:15:15.384-05:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 winner |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            winner pile2 asArray.].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            winner pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [\r        winner pile2 asArray].\r    (pile2 size = 0) ifTrue: [\r        winner pile1 asArray]\r].',			#stamp : 'Anonymous 2/24/2023 18:00',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 winner |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:15',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:15:46.539-05:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 winner |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:15',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:15',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:17:15.664-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\sdais\\Documents\\Pharo\\images\\finalWar\\finalWar.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:17:36.104-05:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\sdais\\Documents\\Pharo\\images\\finalWar\\finalWar.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:23:31.956-05:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:15',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: currentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:23',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:23:33.559-05:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\sdais\\Documents\\Pharo\\images\\finalWar\\finalWar.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:24:24.477-05:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\sdais\\Documents\\Pharo\\images\\finalWar\\finalWar.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:25:56.71-05:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: currentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:23',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: currentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:25',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:38:08.037-05:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: currentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) ifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r    ] ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:25',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.]\r\t ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:38',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:40:30.564-05:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.]\r\t ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:38',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:40',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:42:23.801-05:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:40',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r\t\t  pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:42',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:51:20.716-05:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        pile1 add: currentCard1.\r        pile1 add: currentCard2.\r\t\t  pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        pile2 add: currentCard2.\r        pile2 add: currentCard1.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:42',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:51',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T18:53:53.097-05:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:51',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a < b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a < b].\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:53',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:03:39.064-05:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r    ^ winner asArray',			#stamp : 'Anonymous 2/24/2023 18:13',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r\t\r\t Transcript show: \'this is the winner array:\'; show: winner.\r    ^ winner asArray',			#stamp : 'Anonymous 2/24/2023 19:03',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:14:49.298-05:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a < b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a < b].\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 18:53',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:14',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:15:47.184-05:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:14',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:15',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:18:04.81-05:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r\t\r\t Transcript show: \'this is the winner array:\'; show: winner.\r    ^ winner asArray',			#stamp : 'Anonymous 2/24/2023 19:03',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r\t\r\t\r    ^ winner asArray',			#stamp : 'Anonymous 2/24/2023 19:18',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:27:21.934-05:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:15',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:27',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:28:31.462-05:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:27',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:28',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:28:35.838-05:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r\t\r\t\r    ^ winner asArray',			#stamp : 'Anonymous 2/24/2023 19:18',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r\t\r\t\r    ^ (winner asArray)',			#stamp : 'Anonymous 2/24/2023 19:28',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T19:32:48.416-05:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. \r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\tTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r\t\t  Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:28',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\r"Transcript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. "\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\t"Transcript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr."\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  "Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr."\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\t"Transcript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\t"Transcript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. "\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\t"Transcript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. "\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  "Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r\t\t  "Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:32',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T20:07:22.969-05:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 |\rpile1 := OrderedCollection new.\rpile2 := OrderedCollection new.\raDeck withIndexDo: [:card :index |\r    (index odd) ifTrue: [\r        (card = 1) ifTrue: [ pile1 add: 14 ]\r                    ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                    ifFalse: [ pile2 add: card ] ]].\rpile1 := pile1 reversed.\rpile2 := pile2 reversed.\r\r"Transcript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. "\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [\r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new.\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\t"Transcript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr."\r    [currentCard1 = currentCard2] whileTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\t\t  "Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr."\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\r\t\t\t\t"Transcript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ].\r    \r        (pile1 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r\t\t\t\t"Transcript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. "\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r\t\t\t\t"Transcript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. "\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) \r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r\t\t  "Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ]\r\t ifFalse: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\rsortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r\t\t  "Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray].\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].',			#stamp : 'Anonymous 2/24/2023 19:32',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 20:07',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T20:07:36.722-05:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |\r        (card = 14) ifTrue: [ winner add: 1]\r                    ifFalse: [ winner add: card]].\r\t\r\t\r    ^ (winner asArray)',			#stamp : 'Anonymous 2/24/2023 19:28',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'winner:',			#protocol : #'as yet unclassified',			#sourceCode : 'winner: pile\r    | winner |\r    winner := OrderedCollection new.\r    pile do: [:card |                 "convert the cards to their original values"\r        (card = 14) ifTrue: [ winner add: 1] \r                    ifFalse: [ winner add: card]].\r\t\r\t\r    ^ (winner asArray)',			#stamp : 'Anonymous 2/24/2023 20:07',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T21:09:03.584-05:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 20:07',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r"Transcript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. "\r\r\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r"Transcript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr."\r\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r\t\t  "Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr."\r\t\t\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. \r"Transcript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr."].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r "Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr."]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r"Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:09',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T21:14:49.893-05:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r"Transcript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr. "\r\r\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\r"Transcript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr."\r\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r\r\t\t  "Transcript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr."\r\t\t\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. \r"Transcript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr."].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\r "Transcript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr."]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\r"Transcript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr." ].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:09',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:14',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T21:22:43.317-05:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\sdais\\Documents\\Pharo\\images\\finalWar\\finalWar.image'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T21:28:52.4-05:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:14',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\r\t\tTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\rTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\rTranscript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\rTranscript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:28',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-02-24T21:29:55.495-05:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\r\t\tTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr.\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\rTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\rTranscript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\rTranscript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:28',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\rTranscript show: \'Current card 1: \'; show: currentCard1; show: \' Current card 2: \'; show: \tcurrentCard2; cr.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\r\t\tTranscript show: \'War! with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; \t\t\tcr; cr.\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst.\rTranscript show: \'removed Cards:\'; show: sortedCards asArray; cr.\r\t\t\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\rTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr. \r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.\rTranscript show: \'Player 1 wins with cards: \'; show: currentCard1; show: \' and \'; show: currentCard2; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.\rTranscript show: \'Player 2 wins with cards: \'; show: currentCard2; show: \' and \'; show: currentCard1; cr.\r\t\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\t\t\t\tTranscript show: \'pile2: \'; show: pile2 asArray; cr.].\r\r    (pile1 size = 0) ifTrue: [^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 2/24/2023 21:29',			#package : #WAR		}	}}