OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-03-16T10:24:26.163-04:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-2314c3f.7leheutka0o64mckf5k56tozc', '7' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\rTranscript show: \'Initial pile1: \'; show: pile1 asArray; cr.\rTranscript show: \'Initial pile2: \'; show: pile2 asArray; cr; cr.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\tTranscript show: \'pile2: \';show: pile2 asArray; cr; cr.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [ ^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [ ^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 3/4/2023 19:11',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\tTranscript show: \'pile2: \';show: pile2 asArray; cr; cr.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [ ^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [ ^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 3/16/2023 10:24',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-03-16T10:25:54.496-04:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r\tTranscript show: \'pile1: \'; show: pile1 asArray; cr.\r\tTranscript show: \'pile2: \';show: pile2 asArray; cr; cr.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [ ^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [ ^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 3/16/2023 10:24',			#package : #WAR		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'War class',				#isMetaSide : true			},			#name : #'deal:',			#protocol : #'as yet unclassified',			#sourceCode : 'deal: aDeck\r| pile1 pile2 | "pile1 and pile2 are the two piles of cards"\rpile1 := OrderedCollection new. \rpile2 := OrderedCollection new. \raDeck withIndexDo: [:card :index | "deal the cards to the two piles"\r    (index odd) ifTrue: [   \r        (card = 1) ifTrue: [ pile1 add: 14 ]  "ace is 14"\r                   ifFalse: [ pile1 add: card ] ]\r              ifFalse: [\r        (card = 1) ifTrue: [ pile2 add: 14 ]\r                   ifFalse: [ pile2 add: card ] ]\r].\rpile1 := pile1 reversed. "reverse the piles so that the first card is the top card"\rpile2 := pile2 reversed.\r\r[(pile1 size > 0) and: [pile2 size > 0]] whileTrue: [  \r    |currentCard1 currentCard2 sortedCards|\r    sortedCards := SortedCollection new. "cards that are removed from the piles are added"\r    currentCard1 := pile1 removeFirst.\r    currentCard2 := pile2 removeFirst.\r    [currentCard1 = currentCard2] whileTrue: [ "war occurs when the two cards are equal"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\t\t\t\r        ((pile1 size > 1) and: [pile2 size > 1]) ifTrue: [ "if there are enough cards in the piles to continue the war"\r            sortedCards add: pile1 removeFirst.\r            sortedCards add: pile2 removeFirst. ].\r    \r        (pile1 size = 0) ifTrue: [ "if there are not enough cards in the piles to continue the war"\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile2 addAll: sortedCards.\r            ^self winner: pile2 asArray].\r    \r        (pile2 size = 0) ifTrue: [\r            sortedCards := sortedCards sortBlock: [:a :b | a > b].\r            pile1 addAll: sortedCards.\r            ^self winner: pile1 asArray].\r\r        currentCard1 := pile1 removeFirst.\r        currentCard2 := pile2 removeFirst].\r\r    (currentCard1 > currentCard2) "if the first card is greater than the second card, player 1 wins"\r\tifTrue: [\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile1 addAll: sortedCards.]\r\t ifFalse: [                    "if the second card is greater than the first card, player 2 wins"\r        sortedCards add: currentCard1.\r        sortedCards add: currentCard2.\r        sortedCards := sortedCards sortBlock: [:a :b | a > b].\r        pile2 addAll: sortedCards.].\r\r    (pile1 size = 0) ifTrue: [ ^self winner: pile2 asArray]. "if one of the piles is empty, the other player wins"\r    (pile2 size = 0) ifTrue: [ ^self winner: pile1 asArray].\r].\r',			#stamp : 'Anonymous 3/16/2023 10:25',			#package : #WAR		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-03-16T10:26:04.571-04:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpSessionSnapshot {		#imageName : 'C:\\Users\\sdais\\Documents\\Pharo\\images\\finalWar\\finalWar.image'	}}