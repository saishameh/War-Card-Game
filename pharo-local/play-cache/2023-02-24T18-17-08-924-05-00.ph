| tests results |"These test cases assume that the TOP of the deck is the FRONT of the array.That is, the top card is index 1, 2nd from the top is index 2, etc.If your deal: logic is opposite, simply reverse the array in your method,and reverse it back before returning."tests := #(	"One long war until the end. This is technically a tie, but since	we are returning the pile and not declaring a winner, simply return	the tied pile (the warchest)"	#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9		7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)	"War at the start, then player 1 wins every draw"	#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9		8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)	"Same as above, but players are inverted. Good sanity check."	#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 		7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)	"Medium length game with 4 wars, finishes on a war"	#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9		10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)	"Long game with 11 wars, several of which are multiple rounds"	#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13		1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)	"Medium game with 8 wars, player 1 wins"	#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 		2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)	"Long game with 14 wars, player 1 wins"	#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 		13 8 1 5 1 4 3	13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)	"Long game with 14 wars, player 1 wins"	#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 		2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)	"Medium game with 6 wars, player 2 wins"	#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 		9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)	"Long game with 19 wars, player 2 wins"	#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 		5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)).results := #(	#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 		9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)	#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 		10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)	#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 	10 9 		10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)	#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 		12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)	#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 		10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)		#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 		8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)	#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 		6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)	#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 		10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)	#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 		10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)		#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 		11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)).Transcript clear.1 to: (results size) do: [ :i | 	| shuffling should_be you_said |	shuffling := tests at: i.	should_be := results at: i.	you_said := War deal: shuffling.	you_said = should_be 	ifTrue: [ 		Transcript show: 'Test '; show: i; show: ': PASSED'; cr.	]	ifFalse: [ 		Transcript show: 'Test '; show: i; show: ': FAILED'; cr.	]]"array1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 		2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).case1 := War deal: array1 .Transcript show: case1 ; cr."