OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T18:17:38.205-05:00' ],		#self : OmReference [ '1' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T18:24:26.226-05:00' ],		#self : OmReference [ '2' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T18:45:25.121-05:00' ],		#self : OmReference [ '3' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr; cr.\r\t]\r]'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T18:53:44.455-05:00' ],		#self : OmReference [ '4' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"War at the start, then player 1 wins every draw"\r\t\r\t"Same as above, but players are inverted. Good sanity check."\r\t\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr; cr.\r\t]\r]'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T18:58:19.748-05:00' ],		#self : OmReference [ '5' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"War at the start, then player 1 wins every draw"\r\t\r\t"Same as above, but players are inverted. Good sanity check."\r\t\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r).\rresults := #(\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr; cr.\r\t]\r]'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:06:50.073-05:00' ],		#self : OmReference [ '6' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t"#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)"\r\t"Medium length game with 4 wars, finishes on a war"\r\t"#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)"\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t"#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)"\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:08:26.775-05:00' ],		#self : OmReference [ '7' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t"#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)"\r\t"Medium length game with 4 wars, finishes on a war"\r\t"#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)"\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t"#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)"\r).\rresults := #(\r\t"#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:19:39.274-05:00' ],		#self : OmReference [ '8' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t"#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)"\r\t"Medium length game with 4 wars, finishes on a war"\r\t"#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)"\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t"#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)"\r).\rresults := #(\r\t"#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t\tTranscript show: \'MINE \'; show: you_said; cr.\r\t\tTranscript show: \'EXPC \'; show: should_be ; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:28:13.624-05:00' ],		#self : OmReference [ '9' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t"#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)"\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t"#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)"\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t"#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)"\r).\rresults := #(\r\t"#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t"#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t\tTranscript show: \'MINE \'; show: you_said; cr.\r\t\tTranscript show: \'EXPC \'; show: should_be ; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:30:01.444-05:00' ],		#self : OmReference [ '10' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t"#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)"\r\t"Same as above, but players are inverted. Good sanity check."\r\t"#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)"\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t"#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)"\r).\rresults := #(\r\t"#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t"#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t\tTranscript show: \'MINE \'; show: you_said; cr.\r\t\tTranscript show: \'EXPC \'; show: should_be ; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:30:38.69-05:00' ],		#self : OmReference [ '11' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t"#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)"\r\t"Same as above, but players are inverted. Good sanity check."\r\t"#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)"\r\t"Medium length game with 4 wars, finishes on a war"\r\t"#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)"\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t"#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t"#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)"\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t\tTranscript show: \'MINE \'; show: you_said; cr.\r\t\tTranscript show: \'EXPC \'; show: should_be ; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:31:03.63-05:00' ],		#self : OmReference [ '12' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t"#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)"\r\t"Same as above, but players are inverted. Good sanity check."\r\t"#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)"\r\t"Medium length game with 4 wars, finishes on a war"\r\t"#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)"\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t"#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)"\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)"\r\t"#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)"\r\t"#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t\tTranscript show: \'MINE \'; show: you_said; cr.\r\t\tTranscript show: \'EXPC \'; show: should_be ; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:31:34.115-05:00' ],		#self : OmReference [ '13' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i |\r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T19:41:53.127-05:00' ],		#self : OmReference [ '14' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:01:34.029-05:00' ],		#self : OmReference [ '15' ]	},	#content : '| tests results array|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r].\r\rarray := #(5, 10, 11, 9, 3, 8, 3, 6, 2, 1, 8, 6, 12, 7, 13, 9, 1, 7, 10, 11, 5, 12, 13, 4, 2, 4, 2, 8, 3, 6, 1, 13, 5, 10, 9, 7, 12, 11, 4, 1, 7, 6, 8, 13, 2, 4, 12, 3, 11, 5, 10, 9).\rTranscript show: array size;cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:01:49.552-05:00' ],		#self : OmReference [ '16' ]	},	#content : '| tests results array|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r].\r\rarray := #(5, 10, 11, 9, 3, 8, 3, 6, 2, 1, 8, 6, 12, 7, 13, 9, 1, 7, 10, 11, 5, 12, 13, 4, 2, 4, 2, 8, 3, 6, 1, 13, 5, 10, 9, 7, 12, 11, 4, 1, 7, 6, 8, 13, 2, 4, 12, 3, 11, 5, 10, 9).\rTranscript show: array;cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:02:06.798-05:00' ],		#self : OmReference [ '17' ]	},	#content : '| tests results array|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r].\r\rarray := (5, 10, 11, 9, 3, 8, 3, 6, 2, 1, 8, 6, 12, 7, 13, 9, 1, 7, 10, 11, 5, 12, 13, 4, 2, 4, 2, 8, 3, 6, 1, 13, 5, 10, 9, 7, 12, 11, 4, 1, 7, 6, 8, 13, 2, 4, 12, 3, 11, 5, 10, 9).\rTranscript show: array;cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:03:53.374-05:00' ],		#self : OmReference [ '18' ]	},	#content : '| tests results array|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r].\r\rarray := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rTranscript show: array size;cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:04:55.998-05:00' ],		#self : OmReference [ '19' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r].\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1.\rTranscript show: case1; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:13:14.996-05:00' ],		#self : OmReference [ '20' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\t\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r].\r\r"array1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1.\rTranscript show: case1; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:18:21.856-05:00' ],		#self : OmReference [ '21' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tTranscript show: you_said; cr; cr.\r\t"you_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]"\r].\r\r"array1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1.\rTranscript show: case1; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:18:43.14-05:00' ],		#self : OmReference [ '22' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5  \t\t10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tTranscript show: you_said; cr; cr.\r\t"you_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]"\r].\r\r"array1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1.\rTranscript show: case1; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:19:11.492-05:00' ],		#self : OmReference [ '23' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5  \t\t10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (tests size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tTranscript show: you_said; cr; cr.\r\t"you_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]"\r].\r\r"array1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1.\rTranscript show: case1; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:19:37.361-05:00' ],		#self : OmReference [ '24' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5  \t\t10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r1 to: (tests size) do: [ :i | \r\t| shuffling should_be you_said |\r\t"shuffling := tests at: i.\r\tshould_be := results at: i."\r\tyou_said := War deal: shuffling.\r\tTranscript show: you_said; cr; cr.\r\t"you_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]"\r].\r\r"array1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1.\rTranscript show: case1; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:21:47.453-05:00' ],		#self : OmReference [ '25' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:22:54.903-05:00' ],		#self : OmReference [ '26' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:31:08.227-05:00' ],		#self : OmReference [ '27' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t"Long game with 8 wars, player 1 wins"\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-24T21:32:34.963-05:00' ],		#self : OmReference [ '28' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t"Long game with 8 wars, player 1 wins"\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(13 2 10 3 9 4 12 7 10 4 6 3 7 1 9 1 11 8 6 8 13 5 2 5 12 11 1 2 8 13 6 5 3 12 4 11 7 9 1 8 10 5 6 11 7 3 9 10 13 2 4 12).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-02-25T17:05:59.014-05:00' ],		#self : OmReference [ '26' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T19:56:53.084-05:00' ],		#self : OmReference [ '27' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T19:57:28.454-05:00' ],		#self : OmReference [ '28' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T20:16:00.465-05:00' ],		#self : OmReference [ '29' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:31:30.634-05:00' ],		#self : OmReference [ '30' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:33:54.82-05:00' ],		#self : OmReference [ '31' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:42:51.283-05:00' ],		#self : OmReference [ '32' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 6 2 2 9 9 9 8 \t\t7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:43:03.391-05:00' ],		#self : OmReference [ '33' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 6 2 2 9 9 9 8 \t\t7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:43:37.321-05:00' ],		#self : OmReference [ '34' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 6 2 2 9 9 9 8 \t\t7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 10 1 9 12 6 12 \t\t8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t\r\r\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := \t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:44:02.52-05:00' ],		#self : OmReference [ '35' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 6 2 2 9 9 9 8 \t\t7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 10 1 9 12 6 12 \t\t8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t\t\t\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 10 5 7 5 7 4 \t\t13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\r\r\t\r\r\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:44:29.625-05:00' ],		#self : OmReference [ '36' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 9 9 \r\t\t8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \r\t\t10 9 10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 8 6 12 9 4 3 \t\t10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 6 2 2 9 9 9 8 \t\t7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 10 1 9 12 6 12 \t\t8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t\t\t\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 10 5 7 5 7 4 \t\t13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\r\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 11 12 10 1 13 \t\t12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:46:09.974-05:00' ],		#self : OmReference [ '37' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:48:49.167-05:00' ],		#self : OmReference [ '38' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r\r"array1 := #(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:51:29.443-05:00' ],		#self : OmReference [ '39' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t\t\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 := #(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:52:45.55-05:00' ],		#self : OmReference [ '40' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t\t\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 :=#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:53:20.241-05:00' ],		#self : OmReference [ '41' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t\t\t\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 :=#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:53:54.885-05:00' ],		#self : OmReference [ '42' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t\t\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t"Long game with 14 wars, player 1 wins"\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 :=#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:54:22.712-05:00' ],		#self : OmReference [ '43' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t\t\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t"Long game with 14 wars, player 1 wins"\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t"Long game with 14 wars, player 1 wins"\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:54:56.473-05:00' ],		#self : OmReference [ '44' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t"Medium game with 8 wars, player 1 wins"\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t"Long game with 14 wars, player 1 wins"\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t"Long game with 14 wars, player 1 wins"\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r"1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]"\r\rarray1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:55:04.581-05:00' ],		#self : OmReference [ '45' ]	},	#content : '| tests results array1 case1|\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t"Medium game with 8 wars, player 1 wins"\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t"Long game with 14 wars, player 1 wins"\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t"Long game with 14 wars, player 1 wins"\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r\r"array1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-03T21:57:53.584-05:00' ],		#self : OmReference [ '46' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t"Medium game with 8 wars, player 1 wins"\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t"Long game with 14 wars, player 1 wins"\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t"Long game with 14 wars, player 1 wins"\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r\r"array1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-04T19:07:55.774-05:00' ],		#self : OmReference [ '47' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t"#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"""Same as above, but players are inverted. Good sanity check.""\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t""Medium length game with 4 wars, finishes on a war""\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t""Long game with 11 wars, several of which are multiple rounds""\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t""Medium game with 8 wars, player 1 wins""\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t""Long game with 14 wars, player 1 wins""\t\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t""Long game with 14 wars, player 1 wins""\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t""Medium game with 6 wars, player 2 wins""\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t""Long game with 19 wars, player 2 wins""\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)"\r).\rresults := #(\r\t"#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)"\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t"#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)"\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r\r"array1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr."'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-03-16T10:25:41.354-04:00' ],		#self : OmReference [ '48' ]	},	#content : '| tests results |\r\r"\rThese test cases assume that the TOP of the deck is the FRONT of the array.\rThat is, the top card is index 1, 2nd from the top is index 2, etc.\rIf your deal: logic is opposite, simply reverse the array in your method,\rand reverse it back before returning.\r"\rtests := #(\r\t"One long war until the end. This is technically a tie, but since\r\twe are returning the pile and not declaring a winner, simply return\r\tthe tied pile (the warchest)"\r\t#(1 1 1 1 13 13 13 13 11 11 11 11 12 12 12 12 10 10 10 10 9 9 9 9\r\t\t7 7 7 7 8 8 8 8 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t"War at the start, then player 1 wins every draw"\r\t#(1 13 1 13 1 13 1 13 12 11 12 11 12 11 12 11 10 9 10 9 10 9 10 9\r\t\t8 7 8 7 8 7 8 7 6 5 6 5 6 5 6 5 4 3 4 3 4 3 4 3 2 2 2 2)\r\t"Same as above, but players are inverted. Good sanity check."\r\t#(13 1 13 1 13 1 13 1 11 12 11 12 11 12 11 12 9 10 9 10 9 10 9 10 \r\t\t7 8 7 8 7 8 7 8 5 6 5 6 5 6 5 6 3 4 3 4 3 4 3 4 2 2 2 2)\r\t"Medium length game with 4 wars, finishes on a war"\r\t#(10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9\r\t\t10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9)\r\t"Long game with 11 wars, several of which are multiple rounds"\r\t#(1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13\r\t\t1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 13)\r\t"Medium game with 8 wars, player 1 wins"\r\t#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9)\r\t"Long game with 14 wars, player 1 wins"\r\t#(9 6 7 1 7 11 13 5 2 11 2 6 3 10 13 12 4 1 4 9 9 5 12 8 6 8 12 \r\t\t13 8 1 5 1 4 3\t13 3 8 5 4 2 11 6 10 7 11 9 10 3 10 12 2 7)\r\t"Long game with 14 wars, player 1 wins"\r\t#(11 2 9 12 4 1 6 7 9 3 1 3 6 7 5 8 8 12 9 8 11 10 6 4 8 11 9 2 \r\t\t2 7 5 11 13 5 7 12 1 2 4 3 12 13 1 6 10 4 10 13 3 13 10 5)\r\t"Medium game with 6 wars, player 2 wins"\r\t#(10 3 6 9 12 1 8 13 5 7 9 2 11 13 2 4 3 3 11 6 3 1 1 2 7 7 10 10 \r\t\t9 12 5 13 8 11 10 8 6 6 5 4 4 11 12 7 5 12 2 13 1 8 4 9)\r\t"Long game with 19 wars, player 2 wins"\r\t#(12 12 3 5 2 5 9 1 6 11 8 4 10 10 1 12 7 3 11 13 11 4 3 13 13 2 1 \r\t\t5 8 9 9 2 8 8 6 10 3 1 2 13 7 12 6 4 11 10 7 7 9 4 6 5)\r).\rresults := #(\r\t#(1 1 1 1 13 13 13 13 12 12 12 12 11 11 11 11 10 10 10 10 9 9 \r\t\t9 9 8 8 8 8 7 7 7 7 6 6 6 6 5 5 5 5 4 4 4 4 3 3 3 3 2 2 2 2)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(4 3 2 2 2 2 4 3 4 3 4 3 6 5 6 5 6 5 6 5 8 7 8 7 8 7 8 7 \t10 9 \r\t\t10 9 10 9 10 9 12 11 12 11 12 11 12 11 1 13 1 13 1 13 1 13)\r\t#(1 1 13 12 9 5 11 4 9 3 8 7 7 2 13 10 12 5 10 4 9 6 8 3 1 1 13 \r\t\t12 7 5 11 4 9 3 8 6 7 2 13 10 12 5 11 11 10 8 6 4 6 3 2 2)\r\t#(1 10 13 8 11 9 8 7 11 8 13 7 13 6 12 6 9 5 8 5 7 4 7 4 11 6 12 \r\t\t10 6 3 2 2 12 5 9 3 10 4 9 2 10 3 5 2 1 1 1 13 12 11 4 3)\t\r\t#(4 2 12 4 1 5 11 2 12 12 11 10 7 7 6 5 3 3 10 7 8 7 8 2 9 6 5 2 \r\t\t8 6 12 9 4 3 10 6 1 1 1 13 9 9 13 8 13 5 13 3 11 11 10 4)\r\t#(12 9 12 4 13 8 10 4 13 7 10 3 13 11 11 10 6 6 11 5 3 2 1 12 8 \r\t\t6 2 2 9 9 9 8 7 5 5 4 1 8 11 3 1 7 5 3 1 13 10 4 12 6 7 2)\r\t#(4 3 8 2 1 13 10 4 7 5 7 4 1 13 11 6 13 9 1 12 10 2 7 3 3 2 13 \r\t\t10 1 9 12 6 12 8 9 5 12 5 11 3 8 7 11 11 9 8 6 6 10 5 4 2)\r\t#(8 3 11 4 3 2 5 4 13 11 8 6 1 7 12 4 6 3 13 11 12 2 12 10 11 7 \r\t\t10 5 7 5 7 4 13 9 9 8 1 12 10 6 2 2 9 8 1 10 1 5 13 6 9 3)\t\r\t#(1 6 8 3 1 13 12 12 11 10 9 7 11 6 11 3 10 5 9 2 9 5 7 2 7 5 1 \r\t\t11 12 10 1 13 12 6 10 5 8 4 7 4 4 3 13 9 13 8 8 6 4 3 2 2)\r).\r\rTranscript clear.\r1 to: (results size) do: [ :i | \r\t| shuffling should_be you_said |\r\tshuffling := tests at: i.\r\tshould_be := results at: i.\r\tyou_said := War deal: shuffling.\r\tyou_said = should_be \r\tifTrue: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': PASSED\'; cr.\r\t]\r\tifFalse: [ \r\t\tTranscript show: \'Test \'; show: i; show: \': FAILED\'; cr.\r\t]\r]\r\r"array1 :=#(5 10 11 9 3 8 3 6 2 1 8 6 12 7 13 9 1 7 10 11 5 12 13 4 2 4 \r\t\t2 8 3 6 1 13 5 10 9 7 12 11 4 1 7 6 8 13 2 4 12 3 11 5 10 9).\rcase1 := War deal: array1 .\rTranscript show: case1 ; cr."'}